# ============================================
# ITSM Triage API - Environment Configuration
# ============================================
# Copy this file to .env and fill in your values
# DO NOT commit .env file to version control

# ============================================
# AZURE OPENAI CONFIGURATION (Required)
# ============================================
AZURE_OPENAI_ENDPOINT=https://your-resource.openai.azure.com/
AZURE_OPENAI_API_KEY=your-azure-openai-api-key-here
AZURE_OPENAI_EMBEDDING_DEPLOYMENT=text-embedding-3-small
AZURE_OPENAI_CHAT_DEPLOYMENT=gpt-4.1-mini

# ============================================
# AZURE COGNITIVE SEARCH (Required)
# ============================================
AZURE_SEARCH_ENDPOINT=https://your-search-service.search.windows.net
AZURE_SEARCH_API_KEY=your-azure-search-api-key-here
AZURE_SEARCH_VECTOR_INDEX=itsm-incidents-vector-v2

# ============================================
# API SECURITY (Required for Production)
# ============================================
# Generate a strong random key:
# python -c "import secrets; print(secrets.token_urlsafe(32))"
API_KEY=your-secure-api-key-minimum-32-characters

# ============================================
# APPLICATION CONFIGURATION
# ============================================
# Environment: development or production
# In development mode, localhost requests bypass API key requirement
FLASK_ENV=production

# Enable Flask debug mode (not recommended for production)
FLASK_DEBUG=False

# Logging level: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# Application port (default: 8000)
PORT=8000

# ============================================
# RATE LIMITING (Optional)
# ============================================
# Default rate limits for all endpoints
RATE_LIMIT_DEFAULT=200 per hour, 50 per minute

# Triage endpoint specific limit
RATE_LIMIT_TRIAGE=10 per minute

# Search endpoint specific limit
RATE_LIMIT_SEARCH=30 per minute

# Stats endpoint specific limit
RATE_LIMIT_STATS=60 per minute

# Rate limit storage backend
# Options: memory:// (default), redis://localhost:6379
RATE_LIMIT_STORAGE_URI=memory://

# ============================================
# THREADPOOL CONFIGURATION (Optional)
# ============================================
# Maximum worker threads for concurrent processing
THREADPOOL_MAX_WORKERS=3

# ============================================
# PROXY CONFIGURATION (Optional)
# ============================================
# If behind corporate proxy, configure these:
# HTTP_PROXY=http://proxy.company.com:8080
# HTTPS_PROXY=http://proxy.company.com:8080
# NO_PROXY=localhost,127.0.0.1

# ============================================
# PRODUCTION DEPLOYMENT CHECKLIST
# ============================================
# Before deploying to production, ensure:
# [x] All required variables are set
# [x] API_KEY is strong (32+ characters, random)
# [x] FLASK_ENV=production
# [x] FLASK_DEBUG=False
# [x] LOG_LEVEL=INFO or WARNING
# [x] Rate limiting configured appropriately
# [x] Azure credentials are valid
# [x] Redis configured for rate limiting (recommended)

# ============================================
# QUICK START FOR LOCAL DEVELOPMENT
# ============================================
# 1. Copy this file to .env:
#    cp env.example .env    (Linux/Mac)
#    copy env.example .env  (Windows)
#
# 2. Fill in Azure credentials (required)
#
# 3. For development without API key:
#    FLASK_ENV=development
#    (API key will be bypassed for localhost requests)
#
# 4. Start the application:
#    python app_v2.py
#
# 5. Test health endpoint:
#    curl http://localhost:8000/health

